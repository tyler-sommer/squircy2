// Code generated by go-bindata.
// sources:
// web/public/css/style.css
// DO NOT EDIT!

// +build !debug

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x6a\xc3\x30\x0c\x86\xcf\xc9\x53\x08\x7a\x8d\x4b\xbb\x0c\x06\x0e\xf4\xb2\x73\x1f\xc2\xb5\x94\x5a\xe0\x58\xc6\xf6\x9a\x74\x63\xef\x3e\x9c\xae\x1b\x94\x5e\x3f\xe9\x87\x4f\xfa\x4f\x82\x57\xf8\x6a\x9b\x68\x10\x39\x9c\x55\x91\xa8\xe1\x6d\x17\x97\xa1\xfd\x6e\xdb\x6d\x31\x27\x4f\x87\xe2\xc8\xe0\xa1\xa4\x43\x71\x1d\xdc\x59\x4d\x3e\xb2\x51\xa4\x3c\xb2\xbf\x2c\x3e\xc9\xe2\x93\x2c\x56\x9f\x0b\xa5\xc2\xd6\x78\x65\x3c\x9f\x83\x86\x89\x11\x3d\xdd\xa4\xac\x20\xa9\x98\xe8\xc2\x34\xd7\xdd\x51\x42\x51\xa3\x99\xd8\x5f\x35\x1c\x29\x78\xe9\x8e\x12\x8c\x95\xee\x5d\x42\x16\x6f\x72\x37\x49\x90\x1c\x8d\xa5\xa1\x6d\x26\xb3\xa8\x99\xb1\x38\x0d\xfd\xae\x5e\x0a\x6d\x53\x68\x29\x4a\x2e\x94\x46\x2f\xb3\x06\xf2\x9e\x63\xe6\x5c\x47\xb3\xe3\x42\x6a\x0d\x6b\x08\x32\x27\x13\x2b\xfe\x5f\x76\x8c\x48\xa1\xb2\x55\x24\xf3\x27\x69\xd8\xf7\xf5\x85\x8d\x15\x2f\x49\xc3\xa6\xef\xfb\xd5\x7d\x43\xc8\x45\x52\xb5\x3e\x49\x42\x4a\x1a\xf6\x71\x81\x2c\x9e\x11\x36\xd6\xda\xe1\x3e\x50\xc9\x20\x7f\x64\x0d\xaf\xbf\x5d\xc4\x44\x5b\xc7\xb9\x48\xaa\x85\x01\x00\xcc\x92\x50\x55\x9f\xea\x95\x26\xe3\x87\x15\xd7\xfb\x1c\xf1\xd9\x15\x0d\x2f\xbb\x5b\x95\x3f\x01\x00\x00\xff\xff\xf5\x76\x98\xa0\xe7\x01\x00\x00")

func publicCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicCssStyleCss,
		"public/css/style.css",
	)
}

func publicCssStyleCss() (*asset, error) {
	bytes, err := publicCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/css/style.css", size: 487, mode: os.FileMode(420), modTime: time.Unix(1522794103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/css/style.css": publicCssStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{publicCssStyleCss, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
